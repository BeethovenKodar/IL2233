function SOM(...)
int map_width
int map_height
double learning_rate = 0.1
double neighborhood_radius = 0.5
double decay_rate = 0.95
double[][] weight_vectors[map_width][map_height]

# initialize weight vectors with random values
for each neuron n in the map:
    weight_vectors[n.x][n.y] = random_vector(input_dim)

# iterate over the data
for each input vector v:
    # find the best matching unit
    double best_distance = DOUBLE_MAX
    int best_x, best_y
    for each neuron n in the map:
        distance_to_input = dist(v, weight_vectors[n.x][n.y])
        if distance_to_input < best_distance:
            best_distance = distance_to_input
            best_x = n.x
            best_y = n.y
    
    # update the weights of the BMU and its neighbors
    for each neuron n in the map:
        distance_to_bmu = dist(n, best_x, best_y)
        if distance_to_bmu <= neighborhood_radius:
            influence = exp(-distance_to_bmu^2 / (2 * neighborhood_radius^2))
            new_weight_vector = weight_vectors[n.x][n.y] 
                                + learning_rate * influence 
                                * (v - weight_vectors[n.x][n.y])
            weight_vectors[n.x][n.y] = new_weight_vector
    
    # decay the learning rate and neighborhood radius
    learning_rate = learning_rate * decay_rate
    neighborhood_radius = neighborhood_radius * decay_rate